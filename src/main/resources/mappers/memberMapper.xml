<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="MemberMapper"> <!-- 파일이름x / 예명  -->
	
	<insert id="insertMember"> 
	 	insert into member
	 			  ( member_num
	 			  , member_id 
	 			  , member_pass
	 			  , member_name
	 			  , member_phone
	 			  , member_email
	 			  , member_joinDay
	 			  , member_post
	 			  , member_addMain
	 			  , member_addSub)
	 	     values (#{member_num}
	 	    	  , #{member_id}
	 	    	  , #{member_pass}
	 	    	  , #{member_name}
	 	    	  , #{member_phone}
	 	    	  , #{member_email}
	 	    	  , now()
	 	    	  , #{member_post}
	 	    	  , #{member_addMain}
	 	    	  , #{member_addSub})
	</insert>
	

	<insert id="insertOrders">
		insert into orders(order_num
						   ,member_num
						   ,order_pay
						   ,order_post
						   ,order_addMain
						   ,order_addSub
						   ,order_phone
						   ,order_msg
						   ,order_name
						   ,order_day)
					 values(#{order_num}
						   ,#{member_num}
						   ,#{order_pay}
						   ,#{order_post}
						   ,#{order_addMain}
						   ,#{order_addSub}
						   ,#{order_phone}
						   ,#{order_msg}
						   ,#{order_name}
						   ,NOW())
	</insert>
	
	<!--  위치 여기로 옮겼음 (지원 -->
	<!-- 주문상세 목록 추가 insert : 주문번호 랜덤 생성 -->
  	<insert id="insertOrderDetail">
		INSERT INTO order_detail (member_num
								 ,order_num
								 ,item_num
								 ,item_cnt)
			SELECT
			    c.member_num AS member_num,
	       		o.order_num AS order_num,
	        	c.item_num AS item_num,
	        	c.cart_cnt AS item_cnt
		FROM cart c
		JOIN orders o 
		ON c.member_num = o.member_num
		JOIN item i
		ON c.item_num = i.item_num
		WHERE c.member_num = #{member_num}
		AND o.order_num = #{order_num};
	</insert>	
  	  	  	
  	<select id="getMember" resultType="com.itwillbs.domain.MemberDTO">
  	select member_id
  			, member_name
  			, member_pass
  			, member_num
  			, member_joinDay 
  	from member
	where member_id = #{member_id}  	
  	</select>
  	
  	
  	<!-- sungha 07.29마이페이지-->
  	 <select id="getMember1" resultType="com.itwillbs.domain.MemberDTO">
  	select * from member
	where member_num = #{member_num}
  	</select>
  	
  	<select id="userCheck" resultType="com.itwillbs.domain.MemberDTO">
  	select * 
  	 from member
  	where member_id = #{member_id}
  	  <if test="member_pass != null">
  	  and member_pass = #{member_pass}
  	  </if>
  	</select>

	<select id="userCheck1"
		resultType="com.itwillbs.domain.MemberDTO">
		SELECT * FROM member
		WHERE member_num = #{member_num}
		AND member_id = #{member_id}
		<if test="member_pass != null"> AND member_pass = #{member_pass}</if>
	</select>

  	<select id="userCheck0" resultType="com.itwillbs.domain.MemberDTO">
	    select member_id
	    		, member_pass
	    		, member_delYn
	    		, member_num
	    from member
	    where member_id = #{member_id}
	    and member_pass = #{member_pass}
	    and (member_delYn = 'N' or member_delYn is null)
	</select>
  	
  	<select id="idCheck0" resultType="com.itwillbs.domain.MemberDTO">
		SELECT member_id
		FROM member
		WHERE member_id = #{member_id}
	</select>
  	
 	<update id="updateMember">
 	 UPDATE member
	 SET member_name = #{member_name},
	     member_phone = #{member_phone},
	     member_email = #{member_email},
	     member_post = #{member_post},
	     member_addMain = #{member_addMain},
	     member_addSub = #{member_addSub},
	     member_pass  = #{new_member_pass},
      <if test="member_pass != null">member_pass = #{member_pass}</if>
     WHERE member_id = #{member_id}
	</update>
	
	
	<update id="withderawMember">
 	 UPDATE member
  	 SET member_delYn = 'N',
       <if test="member_pass != null">member_pass = #{member_pass}</if>
  	 WHERE member_id = #{member_id}
  	</update>
	
	
	<select id="getItemsearch" parameterType="string" resultType="map">
	  SELECT item_num
	  		,item_left
	  		,item_name
	  		,item_price
	  		,item_mainImg
	  		,item_salesStatus
	  FROM item
	  WHERE item_name LIKE CONCAT('%', #{item_query}, '%')
	</select>

  	<!-- sungha end-->
  	<select id="nuserCheck" 
            resultType="com.itwillbs.domain.MemberDTO">
    	select * 
    	from member       
    	where member_id = #{member_id}
  	</select> 
  	
  	<insert id="ninsertMember"> 
	 	insert into member(member_num
	 						, member_id
	 						, member_name
	 						, member_phone
	 						, member_email)
	 				values(#{member_num}
	 						, #{member_id}
	 						, #{member_name}
	 						, #{member_phone}
	 						, #{member_email})
	</insert> 
  	
  	<select id="getMembers" resultType="map">
   		 SELECT * FROM member;
   </select>
   
   <update id="changeMemberStatus" parameterType="list">
    UPDATE member
	    SET member_delYn = 'N'
	    WHERE member_num IN
	    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
	        #{item}
	    </foreach>
  </update>
  
  <!-- 장바구니에 목록 추가  -->
  <insert id="insertCart">
	INSERT INTO cart (   
				member_num,
				item_num,
				cart_cnt
	)
	VALUES (
			#{member_num},
			#{item_num},
			#{cart_cnt}
	)
  </insert>
  
  <!-- 장바구니 count 조회 --> 
  <select id="countCart" resultType="int">
	  SELECT count(item_num)
	  FROM cart
	  WHERE member_num = #{member_num}; 
  </select> 
  
  <!-- 장바구니에 목록 조회 -->
  <select id="getCartList" resultType="map">
  		SELECT c.cart_num
  		 , c.member_num
  		 , i.item_num
  		 , c.cart_cnt
  		 , i.item_name
  		 , i.item_price
  		 , i.item_mainImg
	 FROM cart c  
	 JOIN item i 
	   ON i.item_num = c.item_num
	WHERE c.member_num = #{member_num};
  </select>
  
  <!-- 장바구니에 상품 있는지 조회(단일 상품있는지) -->
  <select id="getCart" resultType="boolean"> 
  	SELECT item_num, cart_cnt, member_num
	FROM  cart
  	WHERE member_num = #{member_num}
  	AND item_num = #{item_num}
  	LIMIT 1;
  </select>
  
  <!-- 장바구니에 수량 변경 -->
  <update id="updateCart">
  	UPDATE cart as c
  	SET	cart_cnt = c.cart_cnt + #{cart_cnt}
  	WHERE item_num = #{item_num}
  	AND member_num = #{member_num}
  </update>
  
  <!-- 장바구니 내에서 수량 변경  -->
   <update id="updateInCart">
  	UPDATE cart as c
  	SET	cart_cnt = #{cart_cnt}
  	WHERE item_num = #{item_num}
  	AND member_num = #{member_num}
  </update>
  
    <delete id="deleteCart">
  	DELETE 
  	FROM cart
  	WHERE item_num = #{item_num} 
  	AND member_num = #{member_num}
  </delete>
  
  <delete id="deleteAllCart">
  	DELETE
  	FROM cart
	WHERE member_num = #{member_num};  
  </delete>

	<!-- 주문내역 불러오기  -->
	<select id="getOrderList" resultType="map">
	 SELECT o.order_num
         , MIN(o.order_pay) AS order_pay
         , MIN(o.order_day) AS order_day
         , MIN(i.item_name) AS item_name
         , FORMAT(SUM(i.item_price * od.item_cnt), 0) AS total_price
         , o.order_cancel
    FROM orders o
    JOIN order_detail od ON o.order_num = od.order_num
    JOIN item i ON i.item_num = od.item_num
    WHERE o.member_num = #{member_num}
    GROUP BY o.order_num, o.order_cancel
    ORDER BY o.order_num desc;
	</select>
	
	<!-- 주문 상세 내역 불러오기  -->
	<select id="getOrderDetail" resultType="map">
	SELECT od.order_num
		,  i.item_num
		,  i.item_name
		,  item_cnt
        ,  i.item_price
        ,  i.item_price * item_cnt AS price 
        ,  order_name
        ,  order_msg
        ,  order_addMain
        ,  order_addSub
        ,  order_phone
		,  order_pay	
    FROM order_detail od
    JOIN item i
    ON i.item_num = od.item_num
    JOIN orders o
    ON o.order_num = od.order_num
    WHERE o.member_num =#{member_num}
    AND od.order_num = #{order_num};
	</select> 
	
	<select id="getOrderPay" resultType="map">
		SELECT order_num
		     , order_name
		     , order_pay
		     , order_post
		     , order_addMain
		     , order_addSub
		     , order_msg
		     , order_day
		FROM orders
		WHERE member_num = #{member_num}
		ORDER BY order_day DESC
		LIMIT 1;
	</select>
	
	<!-- 주문테이블에 주문상태 변경  -->
	<update id="cancelOrder">
	UPDATE orders
	SET order_cancel = 'Y'
	WHERE order_num = #{order_num}
	</update>
	
	<select id="getCancelList" resultType="map">
	SELECT cancel_type, cancel_reason, cancel_request
	FROM cancel
	WHERE order_num = #{order_num};
	</select>
	
	
	
	<!-- 취소 테이블에 인서트 -->
	<insert id="cancelInsert">
	INSERT INTO cancel (
					    order_num
					  , cancel_reason
					  , cancel_type
					  , cancel_request)
				VALUES (
				  	    #{order_num}
				  	  , #{cancel_reason}
				  	  , #{cancel_type}
				  	  , NOW())
	</insert>
	
	<!-- 재고정리  -->
	<update id="updateItemLeft">
    UPDATE item
    SET item_left = item_left - ( SELECT item_cnt
							      FROM order_detail
							      WHERE order_num = #{order_num} AND item_num = #{item_num}
							    )
    WHERE item_num = #{item_num}
	</update>
	
  
  <!-- 리뷰작성 - 막내 -->
  <insert id="insertReview">
  	insert into review (review_num
  						, member_num
  						, order_num
  						, item_num
  						, review_star
  						, review_title
  						, review_content
  						, review_img
  						, review_day) 
   				 values (#{review_num}
   				 		, #{member_num}
   				 		, #{order_num}
   				 		, #{item_num}
   				 		, #{review_star}
   				 		, #{review_title}
   				 		, #{review_content}
   				 		, #{review_img}
   				 		, NOW())
  </insert>
    

  <!-- 구매내역 불러오기 -->
  <select id="getItemOrder" resultType="com.itwillbs.domain.MemberDTO">
    SELECT order_num
  	FROM order_detail
 	WHERE member_num = #{member_num} 
 	AND item_num = #{item_num}
  </select>
  
  <!-- 리뷰 목록 -->
   <select id="getItemReviews" resultType="com.itwillbs.domain.MemberDTO">
    select m.member_name
    		, r.member_num
    		, r.review_star
    		, r.review_title
    		, r.review_content
    		, r.review_img
    		, r.review_day
	from review r left join member m
	on r.member_num = m.member_num 
	WHERE item_num = #{item_num}
  </select>
  
  <!-- 리뷰모시기 막내 -->
  <select id="getReviewCountByItemNum" resultType="int">
        SELECT COUNT(*) 
        FROM review 
        WHERE item_num = #{item_num}
  </select>

  <select id="getAverageReviewStarByItemNum" resultType="double">
        SELECT AVG(review_star) 
        FROM review 
        WHERE item_num = #{item_num}
  </select>
  
  <!-- 마이페이지 용 -->
  <select id="getItemMyReview" resultType="com.itwillbs.domain.MemberDTO">
    select r.review_num
    		, r. member_num
    		, r.review_star
    		, r.review_title
    		, r.review_content
    		, r.review_img
    		, r.review_day
    		, i.item_name
    		, r.item_num
	from review r left join item i
	on r.item_num = i.item_num
	WHERE member_num = #{member_num}; 
  </select>
  
  <update id="updateReview">
  update review 
  set review_star = #{review_star}
  	, review_title = #{review_title}
  	, review_content = #{review_content}
  	, review_img = #{review_img}
  where review_num = #{review_num};
  </update>
  
  <delete id="deleteReview">
  delete from review
  where review_num = #{review_num}
  and member_num = #{member_num};
  </delete>
  
 	 <!--  1대1문의 -->
  	<insert id="insertOneBoard">
    INSERT INTO one_board (one_board_type
    						, one_board_title
    						, one_board_content
    						, one_board_file
    						, one_board_pass
    						, one_board_day
    						, one_board_repYn
    						, item_num
    						, member_num
    						, one_board_private
    						, seller_num)
    				SELECT #{one_board_type}
    						, #{one_board_title
    						}, #{one_board_content}
    						, #{one_board_file}
    						, #{one_board_pass}
    						, now()
    						, "미답변"
    						, #{item_num}
    						, #{member_num}
    						, #{one_board_private}
    						, i.seller_num
    				FROM item i 
    				WHERE i.item_num = #{item_num}
	</insert>
  
   <resultMap id="oneBoardResultMap" type="com.itwillbs.domain.OneBoardDTO">
        <result column="one_board_repYn" property="one_board_repYn"/>
        <result column="one_board_type" property="one_board_type"/>
        <result column="one_board_title" property="one_board_title"/>
        <result column="member_name" property="member_name"/>
        <result column="one_board_day" property="one_board_day"/>
        <result column="one_board_content" property="one_board_content"/>
        <result column="one_board_file" property="one_board_file"/>
        <result column="member_num" property="member_num"/>
        <result column="one_board_pass" property="one_board_pass"/>
        <result column="one_board_private" property="one_board_private"/>
        <result column="one_board_num" property="one_board_num"/>
        <result column="seller_num" property="seller_num"/>
        <result column="item_name" property="item_name"/>
    </resultMap>

	<select id="findByItemNum" resultMap="oneBoardResultMap">
    SELECT ob.one_board_repYn
    		, ob.one_board_type
    		, ob.one_board_title
    		, ob.one_board_day
    		, m.member_name
    		, ob.one_board_content
    		, ob.one_board_file
    		, ob.member_num
    		, ob.one_board_pass
    		, ob.one_board_private
    		, ob.one_board_num
    		, ob.one_board_reply
    		, i.seller_num
    		, i.item_name
	FROM one_board ob
	JOIN member m ON ob.member_num = m.member_num
	JOIN item i ON ob.item_num = i.item_num
	WHERE ob.item_num = #{item_num}
	ORDER BY ob.one_board_num DESC
	</select>

	<select id="findByItemNum2" resultMap="oneBoardResultMap"> 
	SELECT ob.one_board_repYn
			, ob.one_board_type
			, ob.one_board_title
			, ob.one_board_day
			, m.member_name
			, ob.one_board_content
			, ob.one_board_file
			, ob.member_num
			, ob.one_board_pass
			, ob.one_board_private
			, ob.one_board_num
			, ob.one_board_reply
			, i.seller_num
			, i.item_name
	FROM one_board ob
	JOIN member m ON ob.member_num = m.member_num
	JOIN item i ON ob.item_num = i.item_num
	WHERE ob.member_num = #{member_num}
	ORDER BY ob.one_board_num DESC
	</select>
	
	<select id="findByOneBoardNum" resultMap="oneBoardResultMap">
    SELECT  one_board_type
    		, one_board_title
    		, one_board_content
    		, one_board_file
    		, one_board_pass
    		, one_board_private
    		, one_board_num
	FROM one_board
	WHERE one_board_num = #{one_board_num}
	ORDER BY one_board_num DESC
	</select>
	
	<select id="getOneBoard" resultType="com.itwillbs.domain.OneBoardDTO">
	  SELECT one_board_pass 
	  FROM one_board
	  WHERE one_board_num = #{one_board_num}
 	 </select>
 	 
 	 <update id="updateOneBoard">
    UPDATE one_board SET
      one_board_type = #{one_board_type},
      one_board_title = #{one_board_title},
      one_board_content = #{one_board_content},
      one_board_file = #{one_board_file},
      one_board_private = #{one_board_private}
    WHERE
      one_board_num = #{one_board_num}
  </update>
  
  <delete id="deleteBoard">
  	DELETE 
  	FROM one_board
  	WHERE one_board_num = #{BoardNum} 
  	</delete>
  
  	<select id="selectWishlist" resultType="com.itwillbs.domain.WishlistDTO">
	  SELECT * FROM like_farm
	  WHERE member_num = #{member_num} 
	  AND item_num = #{item_num}
 	 </select>
 	 	
  	<insert id="insertWishlistItem">
	  INSERT INTO like_farm (member_num
	  						, item_num
	  						, like_farm_day)
	  				VALUES (#{member_num}
	  						, #{item_num}
	  						, now())
  	</insert>
  	
 	 <delete id="deleteWishlist">
  	DELETE 
  	FROM like_farm
  	WHERE item_num = #{item_num} 
  	AND member_num = #{member_num}
  	</delete>
  
  	<resultMap id="wishlist" type="com.itwillbs.domain.WishlistDTO">
    <id property="member_num" column="member_num" />
    <result property="item_num" column="item_num" />
	</resultMap>
  
  	<select id="selectWishlistget" resultMap="wishlist">
  	 SELECT * FROM like_farm
  	 WHERE member_num = #{member_num}
  	</select>
 
 	<resultMap id="zzimlistResultMap" type="com.itwillbs.domain.WishlistDTO">
        <result column="item_num" property="item_num"/>
        <result column="item_name" property="item_name"/>
        <result column="item_price" property="item_price"/>
        <result column="seller_num" property="seller_num"/>
        <result column="seller_storeName" property="seller_storeName"/>
        <result column="item_mainImg" property="item_mainImg"/>
    </resultMap>
    
    <select id="getzzimlist" resultMap="zzimlistResultMap">
    	SELECT item.item_num
    		, item.item_name
    		, item.item_price
    		, item.seller_num
    		, seller.seller_storeName
    		, item.item_mainImg
		FROM item
		JOIN seller 
		ON item.seller_num = seller.seller_num
		JOIN like_farm 
		ON item.item_num = like_farm.item_num
		WHERE like_farm.member_num = #{member_num}
    </select>
  
  	<select id="memberDetail" parameterType="map" resultType="map">
        SELECT * FROM member WHERE member_num = #{member_num}
    </select>
    
  	<!-- 아이디 찾기 -->
	<select id="searchId" parameterType="map" resultType="map">
		SELECT member_id
		FROM member
		WHERE member_email = #{member_email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="searchPwd" parameterType="map" resultType="map">
		SELECT member_pass
		FROM member
		WHERE member_email = #{member_email}
		AND member_id = #{member_id}
	</select>
	
	<!-- 임시비밀번호 발급 -->
	<update id="updatePwd" parameterType="map">
	    UPDATE member
	    SET member_pass = CONCAT(LEFT(UUID(), 8), MID(UUID(), 10, 4))
	    WHERE member_email = #{member_email}
	    AND member_id = #{member_id};
	</update>
		
	<select id="getMemberEmail" resultType="com.itwillbs.domain.MemberDTO">
		SELECT member_email
		FROM member
		WHERE member_email = #{member_email}
	</select>
	
	<select id="getChatBot" resultType="com.itwillbs.domain.ChatBotDTO">
		SELECT * FROM chatbot
	</select>
	
	<select id="getChatBot2" resultType="com.itwillbs.domain.DetailChatBotDTO">
		SELECT *
		FROM detail_chatbot
		WHERE detailchatbotquestion_id = #{_parameter}
	</select>
 
</mapper>