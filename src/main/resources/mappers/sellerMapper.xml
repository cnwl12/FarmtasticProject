<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SellerMapper">
    <select id="getSellers" resultType="map">
    	<!-- 이중조인해서 결제금을 이용해 판매자별 총매출불러오고 format으로 1000단위 구분함. -->
 		 <!--
   		 SELECT s.seller_num, s.seller_storeName, s.seller_name,
       	 FORMAT(SUM(p.pay_pay), 0) AS total_revenue,
         FORMAT(floor(sum(p.pay_pay) * 0.05), 0) as fee,
         FORMAT(SUM(p.pay_pay) - floor(sum(p.pay_pay) * 0.05), 0) as settlement_amount,
         
         FORMAT((SELECT SUM(p.pay_pay) FROM pay p
			   INNER JOIN orders o ON o.order_num = p.order_num
               INNER JOIN item i ON i.item_num = o.item_num
               INNER JOIN seller s ON s.seller_num = i.seller_num), 0) as grand_total_revenue,
         FORMAT((SELECT SUM(floor(p.pay_pay * 0.05)) FROM pay p
			   INNER JOIN orders o ON o.order_num = p.order_num
               INNER JOIN item i ON i.item_num = o.item_num
               INNER JOIN seller s ON s.seller_num = i.seller_num), 0) as grand_fee,
         FORMAT((SELECT SUM(p.pay_pay) - SUM(floor(p.pay_pay * 0.05)) FROM pay p
			   INNER JOIN orders o ON o.order_num = p.order_num
               INNER JOIN item i ON i.item_num = o.item_num
               INNER JOIN seller s ON s.seller_num = i.seller_num), 0) as grand_settlement_amount
         
         FROM seller s
         LEFT JOIN item i ON s.seller_num = i.seller_num
         LEFT JOIN orders o ON i.item_num = o.item_num
         LEFT JOIN pay p ON o.order_num = p.order_num
         GROUP BY s.seller_num, s.seller_id, s.seller_name;-->
         <!-- 매출있는 스토어만 불러오는...-->
        <!-- 
        SELECT s.seller_num, s.seller_storeName, s.seller_name,p.pay_day,
    	DATE_FORMAT(p.pay_day, '%Y-%m') as monthly,
   		FORMAT(SUM(p.pay_pay), 0) AS total_revenue,
    	FORMAT(FLOOR(SUM(p.pay_pay) * 0.05), 0) as fee,
    	FORMAT(SUM(p.pay_pay) - FLOOR(SUM(p.pay_pay) * 0.05), 0) as settlement_amount,
    	
    	(SELECT FORMAT(SUM(p2.pay_pay),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
     	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num
    	 WHERE DATE_FORMAT(p2.pay_day, '%Y-%m') = #{monthly}) as month_revenue,
    	
    	(SELECT FORMAT(FLOOR(SUM(p2.pay_pay) * 0.05),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
    	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num
    	 WHERE DATE_FORMAT(p2.pay_day, '%Y-%m') = #{monthly}) as month_fee,
    	
    	(SELECT FORMAT(SUM(p2.pay_pay) - FLOOR(SUM(p2.pay_pay) * 0.05),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
    	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num
    	 WHERE DATE_FORMAT(p2.pay_day, '%Y-%m') = #{monthly}) as month_settlement,
    	
    	(SELECT FORMAT(SUM(p2.pay_pay),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
    	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num) as grand_total_revenue,
    	
    	(SELECT FORMAT(FLOOR(SUM(p2.pay_pay) * 0.05),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
    	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num) as grand_fee,
    	
    	(SELECT FORMAT(SUM(p2.pay_pay) - FLOOR(SUM(p2.pay_pay) * 0.05),0) FROM pay p2
    	 LEFT JOIN orders o2 ON o2.order_num = p2.order_num
    	 LEFT JOIN item i2 ON i2.item_num = o2.item_num
    	 LEFT JOIN seller s2 ON s2.seller_num = i2.seller_num) as grand_settlement_amount
		FROM pay p
		LEFT JOIN orders o ON o.order_num = p.order_num
		LEFT JOIN item i ON i.item_num = o.item_num
		LEFT JOIN seller s ON s.seller_num = i.seller_num
		WHERE DATE_FORMAT(p.pay_day, '%Y-%m') = #{monthly}
		GROUP BY s.seller_num, s.seller_storeName, s.seller_name, p.pay_day, monthly;
        -->
       
		WITH monthly_seller_data AS (
    		SELECT s.seller_num,s.seller_storeName,s.seller_name,
	 	           SUM(o.sales) AS daily_sales_raw,
           		   DATE_FORMAT(STR_TO_DATE(SUBSTRING(o.order_num, 1, 8), '%Y%m%d'), '%Y-%m-%d') as pay_day,
           		   o.monthly
    		FROM (
        			SELECT o.order_num, o.item_num, o.item_cnt, i.item_price, i.seller_num,
               	    (i.item_price * o.item_cnt) as sales,
                	DATE_FORMAT(STR_TO_DATE(SUBSTRING(o.order_num, 1, 8), '%Y%m%d'), '%Y-%m') as monthly
        FROM order_detail o
        LEFT JOIN item i ON i.item_num = o.item_num
    	) o
    	LEFT JOIN seller s ON s.seller_num = o.seller_num
    	WHERE o.monthly = #{monthly}
    	GROUP BY o.monthly, s.seller_num, s.seller_storeName, s.seller_name, pay_day
		)
	   SELECT *, 
       FORMAT(daily_sales_raw, 0) AS daily_sales,
       FORMAT(FLOOR(daily_sales_raw * 0.05), 0) as daily_fee,
       FORMAT(daily_sales_raw - (daily_sales_raw * 0.05), 0) as daily_settlement,
	   FORMAT(SUM(daily_sales_raw) OVER (PARTITION BY monthly), 0) as month_sales,  
	   FORMAT(SUM(FLOOR(daily_sales_raw * 0.05)) OVER (PARTITION BY monthly), 0) as month_fee,
       FORMAT(SUM(daily_sales_raw - (daily_sales_raw * 0.05)) OVER (PARTITION BY monthly), 0) as month_settlement
	   FROM monthly_seller_data;
</select>
 
    
	<!-- 가맹점 관리 -->
	<select id="getSeller" resultType="map"> 
	select * from seller; 
	</select>
	
	<!-- 판매자 체크 -->
    <select id="sellerCheck" resultType="map">
    select * from seller
    where seller_id = #{seller_id}
     <if test="seller_pass != null">
  	  and seller_pass = #{seller_pass}
  	  </if>
  	</select> 
  	
  	<!-- 선진) 판매자 정보 가져옴 -->
    <select id="getSellerInfo" resultType="map">
    select * from seller
    where seller_num = #{seller_num}
    </select>
    
    <!-- 선진) 판매자 정보 수정 -->
    <!-- 판매자 코드가 일치하는 판매자의 개인정보를 수정 -->
    <update id="updateSeller">
  	update seller
  	set seller_email = #{seller_email}, 
  		seller_mobile = #{seller_mobile},
  		seller_phone = #{seller_phone}, 
  		seller_bank = #{seller_bank},
  		seller_accountNum = #{seller_accountNum},
  		seller_accountHolder = #{seller_accountHolder},
  		seller_post = #{seller_post},
  		seller_addMain = #{seller_addMain},
  		seller_addSub = #{seller_addSub}
  	where seller_num = #{seller_num}
    </update>
    
   <!-- 선진) 차트1 -->
   <select id="getDailySales" resultType="map">
   <![CDATA[
	SELECT date_range.order_mmdd, COALESCE(order_mmdd_totalSales, 0) AS order_mmdd_totalSales
	FROM(SELECT DATE_FORMAT(day_range, '%Y-%m-%d') AS order_mmdd
		 FROM (SELECT DATE_ADD(DATE_FORMAT(LAST_DAY(CURRENT_DATE), '%Y-%m-01'), INTERVAL d DAY) AS day_range
			   FROM (SELECT a.digit * 100 + b.digit * 10 + c.digit AS d
			   		 FROM (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
				          (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
						  (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
	                 WHERE a.digit * 100 + b.digit * 10 + c.digit <= DAY(LAST_DAY(CURRENT_DATE))) days) day_range 
			   WHERE day_range <= LAST_DAY(CURRENT_DATE)) date_range
	LEFT JOIN (SELECT DATE_FORMAT(SUBSTRING(od.order_num, 1, 8), '%Y-%m-%d') AS order_mmdd, SUM(it.item_price * od.item_cnt) AS order_mmdd_totalSales
			   FROM order_detail od
			   JOIN item it ON od.item_num = it.item_num
			   WHERE od.item_num IN (SELECT item_num FROM item WHERE seller_num = 'CR0001')
			   GROUP BY order_mmdd) order_totals ON date_range.order_mmdd = order_totals.order_mmdd
	ORDER BY date_range.order_mmdd;
	]]>
   </select>

    <!-- 가맹점 상태 Y/N -->
    <update id="approveSellerStatus" parameterType="list">
    update seller
    set seller_recoYn = 'Y'
    where seller_num in 
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
        #{item}
    </foreach>
	</update>

	<update id="rejectSellerStatus" parameterType="list">
    update seller
    set seller_recoYn = 'N'
    where seller_num in 
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
        #{item}
    </foreach>
	</update>
    
   <!-- 상품 등록 -->
    <insert id="itemInsert">
       INSERT INTO item (
           seller_type,
           item_name,
           item_price,
           item_sale,
           item_mainImg,
           item_left,
           item_detail,
           seller_num,
           item_salesStatus,
           item_register
       )
       VALUES (
           #{seller_type},
           #{item_name},
           #{item_price},
           #{item_sale},
           #{item_mainImg},
           #{item_left},
           #{item_detail},
           #{seller_num},
           item_salesStatus,
           now()
       )
   </insert>
   
   <!-- 상품 등록 수정 -->
   <update id="itemUpdate">
   UPDATE item
   SET	seller_type = #{seller_type},
   		item_name = #{item_name},
   		item_price = #{item_price},
   		item_mainImg = #{item_mainImg},
   		item_detail = #{item_detail},
   		item_left = #{item_left},
   		item_salesStatus = #{item_salesStatus}
   
   WHERE item_num = #{item_num} AND seller_num = #{seller_num}
   </update>
   
   
   <!-- 판매상태 생성 조회 후 업데이트  -->
	<update id="updateStatus">
    UPDATE item
    SET item_salesStatus = 
        CASE
            WHEN item_salesStatus = 'Y' THEN 'N'
            ELSE 'Y'
        END
    WHERE item_num = #{item_num} AND seller_num = #{seller_num};
	</update>
	
		
    <!-- 상품전체 가져오기  -->
    <select id="getItems" resultType="map">
       SELECT *
       FROM item
       ORDER BY item_num desc
    </select>
    
     <!-- 상품전체 가져오기 (본인제품)  -->
    <select id="getItemSeller" resultType="map">
       SELECT *
       FROM item
       WHERE seller_num = #{seller_num}
       ORDER BY item_num desc
    </select>
    

   <!-- 개별상품 가져오기  -->
   <select id="getItem" resultType="map">
       SELECT *
       FROM item
       WHERE item_num = #{item_num}
       LIMIT 1
   </select>
       
      <!--월별 판매량 가져오기  -->
    <select id="getSales" resultType="map">
    SELECT st.seller_num, s.seller_name,
	DATE_FORMAT(st.order_day, '%Y-%m') as order_month,
	FORMAT(SUM(o.order_pay), 0) AS total_revenue,
	FORMAT(floor(sum(o.order_pay) * 0.05), 0) as fee,
	FORMAT(SUM(o.order_pay) - floor(sum(o.order_pay) * 0.05), 0) as settlement_amount,
	st.settlement_yn
	from settlement st
	LEFT JOIN seller s ON s.seller_num = st.seller_num
	LEFT JOIN item i ON s.seller_num = i.seller_num
	LEFT JOIN orders o on o.order_day = st.order_day
	WHERE s.seller_num != 'admin'
	GROUP BY st.seller_num, s.seller_name, order_month, st.settlement_yn
	ORDER BY order_month; 
    </select>
    
    
   <!-- 정산작업 아직 미완성구문 -->
<update id="updateSettlementYn" parameterType="map">       
    UPDATE settlement
    SET settlement_yn = 'Y'
    WHERE seller_num IN
    (   <foreach collection="sellerNums" item="sellerNum" open="(" close=")" separator=",">
            #{sellerNum}
        </foreach> ) 
    AND DATE_FORMAT(order_day, '%Y-%m') = #{order_month};
</update>
   

   <!-- 일별 판매량 가져오기 수정-->
   <select id="daySales" resultType="map" parameterType="map">
   	 SELECT s.seller_num, s.seller_storeName, s.seller_name,
	 DATE_FORMAT(st.order_day, '%Y-%m') as order_month,
	 DATE_FORMAT(st.order_day, '%Y-%m-%d') as order_day,
     FORMAT(o.order_pay, 0) as revenue,
     FORMAT(floor((o.order_pay) * 0.05), 0) as fee,
     FORMAT((o.order_pay) - floor((o.order_pay) * 0.05), 0) as income
     FROM settlement st
	 LEFT JOIN seller s ON s.seller_num = st.seller_num
	 LEFT JOIN item i ON s.seller_num = i.seller_num
	 LEFT JOIN orders o on o.order_day = st.order_day
     WHERE s.seller_num != 'admin'
     AND s.seller_num = #{sellerNum}
	 AND DATE_FORMAT(st.order_day, '%Y-%m') = #{orderMonth} 
     GROUP BY s.seller_num, s.seller_id, s.seller_name, st.order_day,order_pay
     ORDER BY st.order_day;
   </select>
   
   <!--판매자별 연간판매량전체-->
   <select id="yearSales" resultType="map" parameterType="map">
      SELECT st.seller_num, s.seller_name,
	  DATE_FORMAT(st.order_day, '%Y-%m') as order_month,
	  FORMAT(SUM(o.order_pay), 0) AS revenue,
	  FORMAT(floor(sum(o.order_pay) * 0.05), 0) as fee,
	  FORMAT(SUM(o.order_pay) - floor(sum(o.order_pay) * 0.05), 0) as income
	  FROM settlement st
	  LEFT JOIN seller s ON s.seller_num = st.seller_num
	  LEFT JOIN item i ON s.seller_num = i.seller_num
	  LEFT JOIN orders o on o.order_day = st.order_day
	  WHERE s.seller_num != 'admin'
	  AND s.seller_num = #{sellerNum}
	  GROUP BY s.seller_num, s.seller_name, order_month
	  ORDER BY order_month;
   </select>
   
   	<!-- 판매자 회원가입 -->
    <insert id="insertSeller">  
        insert into seller(seller_num, seller_type, seller_licenseNum, seller_id, seller_pass, seller_name, seller_storeName, seller_post,
        seller_addMain, seller_addSub, seller_phone, seller_bank, seller_accountNum, seller_accountHolder, seller_email, seller_joinDay)
        values((SELECT *
        FROM (
            SELECT CONCAT(#{seller_type}, LPAD( (SELECT COUNT(*) + 1 as next_num 
                            FROM seller 
                            WHERE seller_type = #{seller_type}), 3, '0'))
            FROM DUAL
        	 ) A), #{seller_type}, #{seller_licenseNum}, #{seller_id},#{seller_pass}, #{seller_name}, #{seller_storeName}, #{seller_post}, 
        	 #{seller_addMain}, #{seller_addSub}, #{seller_phone}, #{seller_bank}, #{seller_accountNum}, #{seller_accountHolder}, #{seller_email}, now())
    </insert>

<select id="sellerCheck1" resultType="com.itwillbs.domain.SellerDTO">
    select * from seller
    where seller_id = #{seller_id}
    and seller_pass = #{seller_pass}
    and (seller_recoYn = 'Y' or seller_recoYn = 'N' or seller_recoYn is null)
</select>





  	
  	<select id="idCheck" resultType="String">
    SELECT seller_id FROM seller WHERE seller_num = #{seller_num}
     
  	</select> 
  	
<select id="MemberMngjoin" resultType="Map">
	SELECT
		m.member_id AS member_id,
		i.seller_num AS seller_num,
		o.order_pay AS order_pay,
		o.order_day AS order_day,
		o.item_cnt AS item_cnt,
		p.pay_pay AS pay_pay,
		p.pay_day AS pay_day
	FROM order_detail o
		INNER JOIN item i ON o.item_num = i.item_num
		INNER JOIN member m ON o.member_num = m.member_num
		INNER JOIN pay p ON o.order_num = p.order_num
	WHERE
		o.order_day BETWEEN #{start_date} AND #{end_date}
</select>



	
	<!-- 서영 문의글관리 -->
	 <!-- 서영 판매자 문의관리 -->
  
  <select id="selectByque" resultType="com.itwillbs.domain.OneBoardDTO">
   SELECT ob.one_board_repYn, ob.one_board_type, ob.one_board_title, ob.one_board_day,
  m.member_name, ob.one_board_content, ob.one_board_file, ob.member_num, ob.one_board_pass,
  ob.one_board_private, ob.one_board_num, one_board_repYn, ob.one_board_reply, i.seller_num,   i.item_name,
  s.seller_name
FROM one_board ob
JOIN item i ON ob.item_num = i.item_num
JOIN member m ON ob.member_num = m.member_num
JOIN seller s ON i.seller_num = s.seller_num
WHERE i.seller_num = #{seller_num}

  </select>
 
<update id="updateReply" parameterType="com.itwillbs.domain.OneBoardDTO">
    UPDATE one_board
    SET
      one_board_reply = #{one_board_reply},
      one_board_repYn = '답변완료',
      one_board_repDay = now()
    WHERE
      one_board_num = #{one_board_num}
</update>
   
</mapper>