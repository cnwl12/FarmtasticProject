<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SellerMapper">
    <select id="getSellers" resultType="map">
		WITH monthly_seller_data AS (
    		SELECT s.seller_num,
    			   s.seller_storeName,
    			   s.seller_name,
	 	           SUM(o.sales) AS daily_sales_raw,
           		   DATE_FORMAT(STR_TO_DATE(SUBSTRING(o.order_num, 1, 8), '%Y%m%d'), '%Y-%m-%d') as pay_day,
           		   o.monthly
    		FROM (
        			SELECT o.order_num, 
        			o.item_num, 
        			o.item_cnt, 
        			i.item_price, 
        			i.seller_num,
               	    (i.item_price * o.item_cnt) as sales,
                	DATE_FORMAT(STR_TO_DATE(SUBSTRING(o.order_num, 1, 8), '%Y%m%d'), '%Y-%m') as monthly
        FROM order_detail o
        LEFT JOIN item i 
        ON i.item_num = o.item_num
    	) o
    	LEFT JOIN seller s 
    	ON s.seller_num = o.seller_num
    	WHERE o.monthly = #{monthly}
    	GROUP BY o.monthly, 
    		 	 s.seller_num, 	
    		 	 s.seller_storeName, 
    		 	 s.seller_name, 
    		 	 pay_day
		)
	   SELECT *, 
       FORMAT(daily_sales_raw, 0) AS daily_sales,
       FORMAT(FLOOR(daily_sales_raw * 0.05), 0) as daily_fee,
       FORMAT(daily_sales_raw - (daily_sales_raw * 0.05), 0) as daily_settlement,
	   FORMAT(SUM(daily_sales_raw) OVER (PARTITION BY monthly), 0) as month_sales,  
	   FORMAT(SUM(FLOOR(daily_sales_raw * 0.05)) OVER (PARTITION BY monthly), 0) as month_fee,
       FORMAT(SUM(daily_sales_raw - (daily_sales_raw * 0.05)) OVER (PARTITION BY monthly), 0) as month_settlement
	   FROM monthly_seller_data
	   ORDER BY pay_day;
		
</select>

<select id="totalSales" resultType="map">

	SELECT
   (SELECT FORMAT(SUM(i2.item_price * o2.item_cnt),0) 
      FROM order_detail o2 
      LEFT JOIN item i2 
      ON i2.item_num = o2.item_num) AS total_sales,
	(SELECT format(FLOOR(SUM(i2.item_price * o2.item_cnt) * 0.05),0)
        FROM order_detail o2
        LEFT JOIN item i2 ON i2.item_num = o2.item_num
    ) AS total_fee,
    (SELECT FORMAT(SUM(i2.item_price * o2.item_cnt) - FLOOR(SUM(i2.item_price * o2.item_cnt) * 0.05), 0)
        FROM order_detail o2
        LEFT JOIN item i2 ON i2.item_num = o2.item_num
    ) AS total_settlement
	FROM
    order_detail o
    LEFT JOIN item i ON i.item_num = o.item_num
    LEFT JOIN seller s ON s.seller_num = i.seller_num;
</select>
 
    
	<!-- 가맹점 관리 -->
	<select id="getSeller" resultType="map"> 
	select seller_licenseNum
		 	, seller_name
		 	, seller_storeName
		 	, seller_joinDay
		 	, seller_recoYn
		 	, seller_num
	from seller; 
	</select>
	
	<!-- 판매자 체크 -->
    <select id="sellerCheck" resultType="map">
    	select * from seller
	    where seller_id = #{seller_id}
  	</select> 
  	
  	<!-- 선진) 판매자 정보 가져옴 -->
    <select id="getSellerInfo" resultType="map">
    select * from seller
    where seller_num = #{seller_num}
    </select>
    
    <!-- 선진) 판매자 정보 수정 -->
    <!-- 판매자 코드가 일치하는 판매자의 개인정보를 수정 -->
    <update id="updateSeller">
  	update seller
  	set seller_email = #{seller_email}, 
  		seller_mobile = #{seller_mobile},
  		seller_phone = #{seller_phone}, 
  		seller_bank = #{seller_bank},
  		seller_accountNum = #{seller_accountNum},
  		seller_accountHolder = #{seller_accountHolder},
  		seller_post = #{seller_post},
  		seller_addMain = #{seller_addMain},
  		seller_addSub = #{seller_addSub}
  	where seller_num = #{seller_num}
    </update>
    
   <!-- 선진) 해당 월의 일자별 매출 차트 -->
   <select id="getDailySales" resultType="map">
   <![CDATA[
	SELECT date_range.order_mmdd, COALESCE(order_mmdd_totalSales, 0) AS order_mmdd_totalSales
	FROM(SELECT DATE_FORMAT(day_range, '%Y-%m-%d') AS order_mmdd
		 FROM (SELECT DATE_ADD(DATE_FORMAT(LAST_DAY(CURRENT_DATE), '%Y-%m-01'), INTERVAL d DAY) AS day_range
			   FROM (SELECT a.digit * 100 + b.digit * 10 + c.digit AS d
			   		 FROM (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
				          (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
						  (SELECT 0 AS digit UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
	                 WHERE a.digit * 100 + b.digit * 10 + c.digit <= DAY(LAST_DAY(CURRENT_DATE))) days) day_range 
			   WHERE day_range <= LAST_DAY(CURRENT_DATE)) date_range
	LEFT JOIN (SELECT DATE_FORMAT(SUBSTRING(od.order_num, 1, 8), '%Y-%m-%d') AS order_mmdd, SUM(it.item_price * od.item_cnt) AS order_mmdd_totalSales
			   FROM order_detail od
			   JOIN item it ON od.item_num = it.item_num
			   WHERE od.item_num IN (SELECT item_num FROM item WHERE seller_num = #{seller_num})
			   GROUP BY order_mmdd) order_totals ON date_range.order_mmdd = order_totals.order_mmdd
	ORDER BY date_range.order_mmdd;
	]]>
   </select>

   <!-- 선진) 최근 12개월의 월별 매출 차트 -->
   <select id="getMonthlySales" resultType="map">
	SELECT q1.order_mm, COALESCE(q2.order_mm_totalSales, 0) AS order_mm_totalSales
	FROM(SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 11 MONTH), '%Y-%m') AS order_mm
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 10 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 9 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 8 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 7 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 6 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 5 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 4 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 3 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 2 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 1 MONTH), '%Y-%m')
		UNION ALL SELECT DATE_FORMAT(NOW(), '%Y-%m')) q1 LEFT JOIN (SELECT DISTINCT DATE_FORMAT(SUBSTRING(od.order_num, 1, 8), '%Y-%m') AS order_mm,
																			SUM(it.item_price * od.item_cnt) OVER (PARTITION BY SUBSTRING(od.order_num, 1, 6)) AS order_mm_totalSales
																	FROM order_detail od
																	JOIN item it ON od.item_num = it.item_num
																	WHERE od.item_num IN (SELECT item_num
																							FROM item
																							WHERE seller_num = #{seller_num})) q2 ON q1.order_mm = q2.order_mm
	ORDER BY q1.order_mm; 
   </select>
   
   <!-- 선진) 매출관리 일별 매출 리스트 -->
   <select id="getDailySalesList" resultType="map">
     SELECT	od.order_num,
     		s.seller_num, 
     		s.seller_storeName,
     		s.seller_name,
     		od.item_num, 
     		it.seller_type, 
     		it.item_name, 
     		od.item_cnt, 
     		it.item_price, 
			FORMAT((it.item_price * od.item_cnt),0) as dailySales,
            FORMAT(floor((it.item_price * od.item_cnt) * 0.05),0) as dailyFee,
            FORMAT((it.item_price * od.item_cnt) -floor((it.item_price * od.item_cnt) * 0.05),0) AS dailySettlement,
	        os.order_day,
	        DATE_FORMAT(os.order_day, '%Y-%m-%d') as orderday
	FROM	order_detail od		
    LEFT JOIN item it 
    ON od.item_num = it.item_num
    LEFT JOIN seller s
    ON it.seller_num = s.seller_num
	LEFT JOIN orders os 
	ON od.order_num = os.order_num
	WHERE	od.item_num IN (select	item_num
							from	item
							where	seller_num = #{seller_num})
	ORDER BY os.order_day;
   </select>

   <!-- 선진) 정산관리 -->
   <select id="getSettlementList" resultType="map">
	SELECT 
	    DISTINCT DATE_FORMAT(SUBSTRING(od.order_num, 1, 8), '%Y-%m') AS settlementMonth,
	    FORMAT(FLOOR(SUM(it.item_price * od.item_cnt) OVER (PARTITION BY SUBSTRING(od.order_num, 1, 6))), 0) AS totalSales,
	    FORMAT(FLOOR(SUM(it.item_price * od.item_cnt) OVER (PARTITION BY SUBSTRING(od.order_num, 1, 6)) * 0.05), 0) AS totalFee,
	    FORMAT(FLOOR(SUM(it.item_price * od.item_cnt) OVER (PARTITION BY SUBSTRING(od.order_num, 1, 6)) - (SUM(it.item_price * od.item_cnt) OVER (PARTITION BY SUBSTRING(od.order_num, 1, 6)) * 0.05)), 0) AS totalSettlement,
	    ss.settlementApplication,
	    ss.settlementApplication_day AS applyDay,
	    ss.settlementComplete,
	    ss.settlementComplete_day AS completeDay
	FROM 
	    order_detail od
	    LEFT JOIN item it ON od.item_num = it.item_num
	    LEFT JOIN (
	        SELECT 
	            s.order_num,
	            s.settlementApplication,
	            s.settlementApplication_day,
	            s.settlementComplete,
	            s.settlementComplete_day
	        FROM 
	            settlement s
	        WHERE 
	            s.seller_num = #{seller_num}
	    ) ss ON od.order_num = ss.order_num
	WHERE 
	    od.item_num IN (
	        SELECT 
	            item_num
	        FROM 
	            item
	        WHERE 
	            seller_num = #{seller_num}
	    )
	ORDER BY 
	    settlementMonth;
   </select>

	<!-- 정산 신청 -->
	<insert id="insertSettlementRequest">
	INSERT INTO settlement (
	    seller_num,
	    order_num,
	    settlementApplication, 
		settlementApplication_day, 
		settlementComplete
	)
	SELECT
	    #{seller_num},
	    order_num,
	    'Y',
	    now(),
	    'N'
	FROM (
	    SELECT DISTINCT DATE_FORMAT(SUBSTRING(od.order_num, 1, 8), '%Y-%m') AS settlementMonth,
	           od.order_num AS order_num
	    FROM order_detail od
	    JOIN item it ON od.item_num = it.item_num
	    WHERE od.item_num IN (SELECT item_num
	                          FROM item

	                          WHERE seller_num = #{seller_num})
	) AS selected_orders
	WHERE settlementMonth IN (<foreach item="selectedMonth" collection="checkedSettlements" separator=",">#{selectedMonth}</foreach>);
	</insert>
   
	<!-- 선진) 정산 취소 -->
	<delete id="deleteSettlementRequest">
    DELETE FROM settlement
    WHERE seller_num = #{seller_num} AND DATE_FORMAT(SUBSTRING(order_num, 1, 8), '%Y-%m') IN 
    <foreach item="selectedMonth" collection="checkedSettlements" open="(" separator="," close=")">
        #{selectedMonth}
    </foreach>
	</delete>

    <!-- 가맹점 상태 Y/N -->
    <update id="approveSellerStatus" parameterType="list">
    update seller
    set   seller_recoYn = 'Y'
    where seller_num in 
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
        #{item}
    </foreach>
	</update>

	<update id="rejectSellerStatus" parameterType="list">
    update seller
    set   seller_recoYn = 'N'
    where seller_num in 
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
        #{item}
    </foreach>
	</update>
    
   <!-- 상품 등록 -->
    <insert id="itemInsert">
       INSERT INTO item (
           seller_type,
           item_name,
           item_price,
           item_mainImg,
           item_left,
           item_detail,
           seller_num,
           item_salesStatus,
           item_register
       )
       VALUES (
           #{seller_type},
           #{item_name},
           #{item_price},
           #{item_mainImg},
           #{item_left},
           #{item_detail},
           #{seller_num},
           item_salesStatus,
           now()
       )
   </insert>
   
   <!-- 상품 등록 수정 -->
   <update id="itemUpdate">
   UPDATE item
   SET	seller_type = #{seller_type},
   		item_name = #{item_name},
   		item_price = #{item_price},
   		item_mainImg = #{item_mainImg},
   		item_detail = #{item_detail},
   		item_left = #{item_left},
   		item_salesStatus = #{item_salesStatus}
   
   WHERE item_num = #{item_num} AND seller_num = #{seller_num}
   </update>
   
   
   <!-- 판매상태 생성 조회 후 업데이트  -->
	<update id="updateStatus">
    UPDATE item
    SET item_salesStatus = 
        CASE
            WHEN item_salesStatus = 'Y' THEN 'N'
            ELSE 'Y'
        END
    WHERE item_num = #{item_num} AND seller_num = #{seller_num};
	</update>
	
		
    <!-- 상품전체 가져오기  -->
    <select id="getItems" resultType="map">
       SELECT item_num
       		 ,seller_type
       		 ,item_name
       		 ,item_price
       		 ,item_mainImg
       		 ,item_detail
       		 ,item_left
       FROM item
       ORDER BY item_num desc
    </select>
    
     <!-- 상품전체 가져오기 (본인제품)  -->
    <select id="getItemSeller" resultType="map">
       SELECT item_num
       		 ,seller_type
       		 ,item_name
       		 ,item_price
       		 ,item_mainImg
       		 ,item_detail
       		 ,item_left
       FROM item
       WHERE seller_num = #{seller_num}
       ORDER BY item_num desc
    </select>
    

   <!-- 개별상품 가져오기  -->
   <select id="getItem" resultType="map">
       SELECT *
       FROM item
       WHERE item_num = #{item_num}
       LIMIT 1
   </select>
       
      <!--월별 판매량 가져오기  -->
    <select id="getSales" resultType="map">
 	WITH sales_info AS (
    			SELECT i.seller_num,
          			   o.order_num,
           			   DATE_FORMAT(STR_TO_DATE(SUBSTRING(o.order_num, 1, 8), '%Y%m%d'), '%Y-%m') as order_month,
         			   i.item_price * o.item_cnt as total_revenue,
          			   (i.item_price * o.item_cnt) * 0.05 as fee,
           			   (i.item_price * o.item_cnt) - ((i.item_price * o.item_cnt) * 0.05) as settlement_amount
   				FROM item i
    			JOIN order_detail o ON o.item_num = i.item_num),

			summary AS (
    			SELECT seller_num,
           			   order_month,
           			   SUM(total_revenue) AS total_revenue,
          			   SUM(fee) AS total_fee,
          			   SUM(settlement_amount) AS total_settlement_amount
    			FROM sales_info
    			GROUP BY seller_num, order_month)

			SELECT st.seller_num,
      			   s.seller_storeName,
       			   s.seller_name,
       			   sm.order_month,
      			   FORMAT(sm.total_revenue, 0) as total_revenue,
      			   FORMAT(sm.total_fee, 0) as fee,
        		   FORMAT(sm.total_settlement_amount, 0) as settlement_amount,
      			   st.settlementApplication,
      			   st.settlementComplete,
      			   st.settlementComplete_day
			FROM settlement st
			JOIN seller s ON s.seller_num = st.seller_num
			JOIN summary sm ON sm.seller_num = st.seller_num AND sm.order_month = DATE_FORMAT(STR_TO_DATE(SUBSTRING(st.order_num, 1, 8), '%Y%m%d'), '%Y-%m')
			WHERE st.settlementApplication = 'Y'AND st.settlementApplication != 'N'
			GROUP BY st.seller_num, s.seller_storeName, s.seller_name, sm.order_month,st.settlementComplete,st.settlementComplete_day;
    </select>
    
    
   <!-- 정산작업 아직 미완성구문 -->
	<update id="updateSettlementYn" parameterType="map">
   UPDATE settlement
    SET settlementComplete = 'Y',
    settlementComplete_day = NOW()
    WHERE seller_num IN
        (
            <foreach collection="sellerNums" item="sellerNum" open="" close="" separator=",">
                #{sellerNum}
            </foreach>
        )
    AND DATE_FORMAT(STR_TO_DATE(SUBSTRING(order_num, 1, 8), '%Y%m%d'), '%Y-%m') IN
        (
            <foreach collection="orderMonths" item="orderMonth" open="" close="" separator=",">
                #{orderMonth}
            </foreach>
        );
	</update>


   <!-- 일별 판매량 가져오기 수정-->
   <select id="daySales" resultType="map" parameterType="map">
   	 SELECT s.seller_num, s.seller_storeName, s.seller_name,
	 DATE_FORMAT(st.order_day, '%Y-%m') as order_month,
	 DATE_FORMAT(st.order_day, '%Y-%m-%d') as order_day,
     FORMAT(o.order_pay, 0) as revenue,
     FORMAT(floor((o.order_pay) * 0.05), 0) as fee,
     FORMAT((o.order_pay) - floor((o.order_pay) * 0.05), 0) as income
     FROM settlement st
	 LEFT JOIN seller s ON s.seller_num = st.seller_num
	 LEFT JOIN item i ON s.seller_num = i.seller_num
	 LEFT JOIN orders o on o.order_day = st.order_day
     WHERE s.seller_num != 'admin'
     AND s.seller_num = #{sellerNum}
	 AND DATE_FORMAT(st.order_day, '%Y-%m') = #{orderMonth} 
     GROUP BY s.seller_num, s.seller_id, s.seller_name, st.order_day,order_pay
     ORDER BY st.order_day;
   </select>
   
   <!--판매자별 연간판매량전체-->
   <select id="yearSales" resultType="map" parameterType="map">
      SELECT st.seller_num, s.seller_name,
	  DATE_FORMAT(st.order_day, '%Y-%m') as order_month,
	  FORMAT(SUM(o.order_pay), 0) AS revenue,
	  FORMAT(floor(sum(o.order_pay) * 0.05), 0) as fee,
	  FORMAT(SUM(o.order_pay) - floor(sum(o.order_pay) * 0.05), 0) as income
	  FROM settlement st
	  LEFT JOIN seller s ON s.seller_num = st.seller_num
	  LEFT JOIN item i ON s.seller_num = i.seller_num
	  LEFT JOIN orders o on o.order_day = st.order_day
	  WHERE s.seller_num != 'admin'
	  AND s.seller_num = #{sellerNum}
	  GROUP BY s.seller_num, s.seller_name, order_month
	  ORDER BY order_month;
   </select>
   
   	<!-- 판매자 회원가입 -->
    <insert id="insertSeller">  
        insert into seller(seller_num, seller_type, seller_licenseNum, seller_id, seller_pass, seller_name, seller_storeName, seller_post,
        seller_addMain, seller_addSub, seller_phone, seller_bank, seller_accountNum, seller_accountHolder, seller_email, seller_joinDay)
        values((SELECT *
        FROM (
            SELECT CONCAT(#{seller_type}, LPAD( (SELECT COUNT(*) + 1 as next_num 
                            FROM seller 
                            WHERE seller_type = #{seller_type}), 3, '0'))
            FROM DUAL
        	 ) A), #{seller_type}, #{seller_licenseNum}, #{seller_id},#{seller_pass}, #{seller_name}, #{seller_storeName}, #{seller_post}, 
        	 #{seller_addMain}, #{seller_addSub}, #{seller_phone}, #{seller_bank}, #{seller_accountNum}, #{seller_accountHolder}, #{seller_email}, now())
    </insert>

<select id="sellerCheck1" resultType="com.itwillbs.domain.SellerDTO">
    select * from seller
    where seller_id = #{seller_id}
    and seller_pass = #{seller_pass}
    and (seller_recoYn = 'Y' or seller_recoYn = 'N' or seller_recoYn is null)
</select>





  	
  	<select id="idCheck" resultType="String">
    SELECT seller_id FROM seller WHERE seller_num = #{seller_num}
     
  	</select> 
  	
<select id="MemberMngjoin" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT m.member_id, m.member_name, m.member_phone,  CONCAT(o.order_addMain, ',', o.order_addSub) order_addMain, i.item_name, 
           o.order_day, od.item_cnt * i.item_price AS order_pay, od.item_cnt, o.order_phone, o.order_name   
    FROM member m 
    INNER JOIN orders o ON m.member_num = o.member_num 
    INNER JOIN order_detail od ON o.order_num = od.order_num 
    INNER JOIN item i ON od.item_num = i.item_num 
    WHERE i.seller_num = #{seller_num} AND
          o.order_day BETWEEN #{startDate} AND #{endDate}
    ORDER BY o.order_day DESC
</select>





	
	 <!-- 서영 판매자 문의보기 -->
  	<select id="selectByque" resultType="com.itwillbs.domain.OneBoardDTO">
   	SELECT ob.one_board_repYn
   			, ob.one_board_type
   			, ob.one_board_title
   			, ob.one_board_day
   			, m.member_name
   			, ob.one_board_content
   			, ob.one_board_file
   			, ob.member_num
   			, ob.one_board_pass
   			, ob.one_board_private
   			, ob.one_board_num
   			, ob.one_board_repYn
   			, ob.one_board_reply
   			, ob.one_board_repDay
   			, i.seller_num 
   			, i.item_name
   			, s.seller_name
	FROM one_board ob
	JOIN item i 
	ON ob.item_num = i.item_num
	JOIN member m 
	ON ob.member_num = m.member_num
	JOIN seller s 
	ON i.seller_num = s.seller_num
	WHERE i.seller_num = #{seller_num}
	</select>
	
	<select id="getItemNames" resultType="java.lang.String">
   	SELECT item_name
	FROM item
	WHERE seller_num = #{seller_num}
	</select>
 
	<!-- 판매자 문의답변 등록 -->
	<update id="updateReply" parameterType="com.itwillbs.domain.OneBoardDTO">
    UPDATE one_board
    SET
      one_board_reply = #{one_board_reply},
      one_board_repYn = '답변완료',
      one_board_repDay = now()
    WHERE
      one_board_num = #{one_board_num}
	</update>
   
   <!-- 혜원 판매자 리뷰관리 -->
   <select id="getReview" resultType="com.itwillbs.domain.SellerDTO">
   SELECT i.seller_num
   			, i.item_name
   			, r.review_star
   			, r.review_num
   			, r.member_num
   			, m.member_name
   			, r.review_title
   			, r.review_content
   			, r.review_img
   			, r.review_day
	FROM review r
	JOIN item i 
	ON i.item_num = r.item_num
	JOIN member m 
	ON r.member_num = m.member_num
	join seller s 
	on i.seller_num = s.seller_num
	WHERE i.seller_num = #{seller_num};
   </select>
   
   <delete id="deleteSellerReview" parameterType="map">
    delete from review
    where review_num = #{review_num}
    and member_num = #{member_num};
	</delete>
   
</mapper>