/* eslint-disable */ ! function(n, t) {
    var r, e;
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (r = n.Base64, (e = t()).noConflict = function() {
        return n.Base64 = r, e
    }, n.Meteor && (Base64 = e), n.Base64 = e)
}("undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : this, function() {
    "use strict";
    var n, t, r, e, o, $ = "3.7.2",
        f = "function" == typeof atob,
        u = "function" == typeof btoa,
        c = "function" == typeof Buffer,
        i = "function" == typeof TextDecoder ? new TextDecoder : void 0,
        a = "function" == typeof TextEncoder ? new TextEncoder : void 0,
        x = Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),
        d = (n = x, t = {}, n.forEach(function(n, r) {
            return t[n] = r
        }), t),
        s = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,
        l = String.fromCharCode.bind(String),
        h = "function" == typeof Uint8Array.from ? Uint8Array.from.bind(Uint8Array) : function(n, t) {
            return void 0 === t && (t = function(n) {
                return n
            }), new Uint8Array(Array.prototype.slice.call(n, 0).map(t))
        },
        p = function(n) {
            return n.replace(/=/g, "").replace(/[+\/]/g, function(n) {
                return "+" == n ? "-" : "_"
            })
        },
        A = function(n) {
            return n.replace(/[^A-Za-z0-9\+\/]/g, "")
        },
        _ = function(n) {
            for (var t, r, e, o, $ = "", f = n.length % 3, u = 0; u < n.length;) {
                if ((r = n.charCodeAt(u++)) > 255 || (e = n.charCodeAt(u++)) > 255 || (o = n.charCodeAt(u++)) > 255) throw TypeError("invalid character found");
                $ += x[(t = r << 16 | e << 8 | o) >> 18 & 63] + x[t >> 12 & 63] + x[t >> 6 & 63] + x[63 & t]
            }
            return f ? $.slice(0, f - 3) + "===".substring(f) : $
        },
        y = u ? function(n) {
            return btoa(n)
        } : c ? function(n) {
            return Buffer.from(n, "binary").toString("base64")
        } : _,
        C = c ? function(n) {
            return Buffer.from(n).toString("base64")
        } : function(n) {
            for (var t = [], r = 0, e = n.length; r < e; r += 4096) t.push(l.apply(null, n.subarray(r, r + 4096)));
            return y(t.join(""))
        },
        g = function(n) {
            if (n.length < 2) {
                var t = n.charCodeAt(0);
                return t < 128 ? n : t < 2048 ? l(192 | t >>> 6) + l(128 | 63 & t) : l(224 | t >>> 12 & 15) + l(128 | t >>> 6 & 63) + l(128 | 63 & t)
            }
            var t = 65536 + (n.charCodeAt(0) - 55296) * 1024 + (n.charCodeAt(1) - 56320);
            return l(240 | t >>> 18 & 7) + l(128 | t >>> 12 & 63) + l(128 | t >>> 6 & 63) + l(128 | 63 & t)
        },
        b = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,
        v = function(n) {
            return n.replace(b, g)
        },
        F = c ? function(n) {
            return Buffer.from(n, "utf8").toString("base64")
        } : a ? function(n) {
            return C(a.encode(n))
        } : function(n) {
            return y(v(n))
        },
        m = function(n, t) {
            return void 0 === t && (t = !1), t ? p(F(n)) : F(n)
        },
        B = function(n) {
            return m(n, !0)
        },
        D = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,
        w = function(n) {
            switch (n.length) {
                case 4:
                    var t = ((7 & n.charCodeAt(0)) << 18 | (63 & n.charCodeAt(1)) << 12 | (63 & n.charCodeAt(2)) << 6 | 63 & n.charCodeAt(3)) - 65536;
                    return l((t >>> 10) + 55296) + l((1023 & t) + 56320);
                case 3:
                    return l((15 & n.charCodeAt(0)) << 12 | (63 & n.charCodeAt(1)) << 6 | 63 & n.charCodeAt(2));
                default:
                    return l((31 & n.charCodeAt(0)) << 6 | 63 & n.charCodeAt(1))
            }
        },
        z = function(n) {
            return n.replace(D, w)
        },
        S = function(n) {
            if (n = n.replace(/\s+/g, ""), !s.test(n)) throw TypeError("malformed base64.");
            n += "==".slice(2 - (3 & n.length));
            for (var t, r, e, o = "", $ = 0; $ < n.length;) t = d[n.charAt($++)] << 18 | d[n.charAt($++)] << 12 | (r = d[n.charAt($++)]) << 6 | (e = d[n.charAt($++)]), o += 64 === r ? l(t >> 16 & 255) : 64 === e ? l(t >> 16 & 255, t >> 8 & 255) : l(t >> 16 & 255, t >> 8 & 255, 255 & t);
            return o
        },
        Z = f ? function(n) {
            return atob(A(n))
        } : c ? function(n) {
            return Buffer.from(n, "base64").toString("binary")
        } : S,
        E = c ? function(n) {
            return h(Buffer.from(n, "base64"))
        } : function(n) {
            return h(Z(n), function(n) {
                return n.charCodeAt(0)
            })
        },
        U = c ? function(n) {
            return Buffer.from(n, "base64").toString("utf8")
        } : i ? function(n) {
            return i.decode(E(n))
        } : function(n) {
            return z(Z(n))
        },
        R = function(n) {
            return A(n.replace(/[-_]/g, function(n) {
                return "-" == n ? "+" : "/"
            }))
        },
        j = function(n) {
            return U(R(n))
        },
        I = {
            version: $,
            VERSION: $,
            atob: Z,
            atobPolyfill: S,
            btoa: y,
            btoaPolyfill: _,
            fromBase64: j,
            toBase64: m,
            encode: m,
            encodeURI: B,
            encodeURL: B,
            utob: v,
            btou: z,
            decode: j,
            isValid: function(n) {
                if ("string" != typeof n) return !1;
                var t = n.replace(/\s+/g, "").replace(/={0,2}$/, "");
                return !/[^\s0-9a-zA-Z\+/]/.test(t) || !/[^\s0-9a-zA-Z\-_]/.test(t)
            },
            fromUint8Array: function(n, t) {
                return void 0 === t && (t = !1), t ? p(C(n)) : C(n)
            },
            toUint8Array: function(n) {
                return E(R(n))
            }
        };
    return I.Base64 = {}, Object.keys(I).forEach(function(n) {
        return I.Base64[n] = I[n]
    }), I
});